"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/influencer/messages/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: function() { return /* binding */ ApiError; },\n/* harmony export */   addInfluencerPaymentAccount: function() { return /* binding */ addInfluencerPaymentAccount; },\n/* harmony export */   addInfluencerSocialAccount: function() { return /* binding */ addInfluencerSocialAccount; },\n/* harmony export */   adminCreateCode: function() { return /* binding */ adminCreateCode; },\n/* harmony export */   adminListInfluencerCodes: function() { return /* binding */ adminListInfluencerCodes; },\n/* harmony export */   createAlert: function() { return /* binding */ createAlert; },\n/* harmony export */   createMyDiscountCode: function() { return /* binding */ createMyDiscountCode; },\n/* harmony export */   deleteAlert: function() { return /* binding */ deleteAlert; },\n/* harmony export */   deleteInfluencerSocialAccount: function() { return /* binding */ deleteInfluencerSocialAccount; },\n/* harmony export */   getInfluencerMe: function() { return /* binding */ getInfluencerMe; },\n/* harmony export */   getInfluencerPaymentAccounts: function() { return /* binding */ getInfluencerPaymentAccounts; },\n/* harmony export */   getInfluencerSocialAccounts: function() { return /* binding */ getInfluencerSocialAccounts; },\n/* harmony export */   getInfluencerSummary: function() { return /* binding */ getInfluencerSummary; },\n/* harmony export */   getMyBalance: function() { return /* binding */ getMyBalance; },\n/* harmony export */   getMySales: function() { return /* binding */ getMySales; },\n/* harmony export */   getMySettlements: function() { return /* binding */ getMySettlements; },\n/* harmony export */   getThread: function() { return /* binding */ getThread; },\n/* harmony export */   getUnreadAlerts: function() { return /* binding */ getUnreadAlerts; },\n/* harmony export */   getUnreadCount: function() { return /* binding */ getUnreadCount; },\n/* harmony export */   listAlerts: function() { return /* binding */ listAlerts; },\n/* harmony export */   listMyCodesUnsafe: function() { return /* binding */ listMyCodesUnsafe; },\n/* harmony export */   markAlertRead: function() { return /* binding */ markAlertRead; },\n/* harmony export */   markRead: function() { return /* binding */ markRead; },\n/* harmony export */   patchInfluencerMe: function() { return /* binding */ patchInfluencerMe; },\n/* harmony export */   patchInfluencerMePassword: function() { return /* binding */ patchInfluencerMePassword; },\n/* harmony export */   postInfluencerApply: function() { return /* binding */ postInfluencerApply; },\n/* harmony export */   request: function() { return /* binding */ request; },\n/* harmony export */   searchInfluencers: function() { return /* binding */ searchInfluencers; },\n/* harmony export */   sendMessage: function() { return /* binding */ sendMessage; },\n/* harmony export */   updateInfluencerSocialAccount: function() { return /* binding */ updateInfluencerSocialAccount; }\n/* harmony export */ });\n/* Açıklama (TR):\n * Bu dosya, admin UI'nin backend ile konuşması için minimal ve güvenli yardımcıları içerir.\n * Server-only API'ler (next/headers gibi) kullanılmaz; kütüphane hem client hem server tüketimine uygundur.\n * - Cookie tabanlı kimlik doğrulama için fetch varsayılan olarak credentials: 'include' kullanır.\n * - Authorization başlığı eklenmez. Gerekirse ileride authMode ile genişletilebilir.\n * - Hata yönetimi: Backend'in döndüğü { error | message } yüzeye taşınır ve Error/ApiError olarak fırlatılır.\n * - Aşağıda influencer başvuru ve profil uçlarına özel istemci fonksiyonları eklenmiştir.\n */ class ApiError extends Error {\n    constructor(status, message){\n        super(message);\n        this.status = status;\n    }\n}\n/**\n * Ortak istek sarmalayıcısı (TR):\n * - next/headers bağımlılığı yoktur.\n * - Varsayılan olarak JSON içerik türü ve credentials: 'include' ile çalışır.\n * - Authorization eklenmez (authMode === 'bearer' ileride kullanılabilir).\n */ async function request(url) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        ...opts.headers || {}\n    };\n    // URL zaten absolute ise değiştirme (örn: http:// veya https:// ile başlıyorsa)\n    const isAbsolute = /^https?:\\/\\//i.test(url);\n    // Tüm istekleri localhost:5002'ye yönlendir\n    const fullUrl = isAbsolute ? url : \"http://localhost:5003\".concat(url);\n    var _opts_method, _opts_cache;\n    const res = await fetch(fullUrl, {\n        method: (_opts_method = opts.method) !== null && _opts_method !== void 0 ? _opts_method : \"GET\",\n        headers,\n        body: opts.body !== undefined ? JSON.stringify(opts.body) : undefined,\n        credentials: \"include\",\n        cache: (_opts_cache = opts.cache) !== null && _opts_cache !== void 0 ? _opts_cache : \"no-store\"\n    });\n    if (res.status === 401 || res.status === 403) {\n        throw new ApiError(res.status, \"Yetkilendirme hatası\");\n    }\n    // Başarısız yanıtlarda backend mesajını okumaya çalışalım\n    if (!res.ok) {\n        let message = \"İstek başarısız.\";\n        try {\n            const data = await res.json();\n            if (data === null || data === void 0 ? void 0 : data.error) message = String(data.error);\n            else if (data === null || data === void 0 ? void 0 : data.message) message = String(data.message);\n            else message = JSON.stringify(data);\n        } catch (e) {\n            const text = await res.text().catch(()=>\"\");\n            if (text) message = text;\n        }\n        throw new ApiError(res.status, message);\n    }\n    // JSON varsayıyoruz; backend farklı dönerse uyarlanabilir.\n    return await res.json();\n}\n/* Yardımcı: UI <-> API arasında channels alanını dönüştürme\n * Backend TEXT(JSON) saklasa bile, client tarafından dizi göndermek güvenli (server JSON.stringify yapabilir).\n */ function channelsToApi(value) {\n    if (value == null) return value !== null && value !== void 0 ? value : undefined;\n    // Backend string[] kabul ettiğinden doğrudan dizi döndür.\n    return value.map((s)=>s.trim()).filter(Boolean);\n}\nfunction channelsFromApi(value) {\n    if (!value) return [];\n    if (Array.isArray(value)) return value;\n    return String(value).split(\",\").map((s)=>s.trim()).filter(Boolean);\n}\n/* =========================\n * Influencer API istemci fonksiyonları\n * ========================= */ /** Başvuru oluşturma — POST /api/v1/influencers/apply\n * Not (TR): social_accounts alanı geçici olarak API'ye aynen iletilir. Backend desteği geldiğinde schema uyumu için güncellenecek.\n */ async function postInfluencerApply(payload) {\n    const body = {\n        ...payload,\n        channels: channelsToApi(payload.channels),\n        // social_accounts varsa olduğu gibi gönderilir (router görmezden gelebilir).\n        social_accounts: payload.social_accounts\n    };\n    // Public olabilir; cookie gerekmez. credentials: 'include' zararsızdır.\n    return request(\"/api/v1/influencers/apply\", {\n        method: \"POST\",\n        body\n    });\n}\n/** Influencer kendi kodunu oluşturur — POST /api/v1/codes/me (JWT gerekli) */ async function createMyDiscountCode(input) {\n    return request(\"/api/v1/codes/me\", {\n        method: \"POST\",\n        body: input !== null && input !== void 0 ? input : {}\n    });\n}\n/** Admin: belirli bir influencerın kodlarını listele — GET /api/v1/codes/influencer/:id */ async function adminListInfluencerCodes(influencerId) {\n    return request(\"/api/v1/codes/influencer/\".concat(influencerId), {\n        method: \"GET\"\n    });\n}\n/** Admin: yeni kod oluştur — POST /api/v1/codes */ async function adminCreateCode(payload) {\n    return request(\"/api/v1/codes\", {\n        method: \"POST\",\n        body: payload\n    });\n}\n/** Me — GET /api/v1/influencers/me (JWT gerekli) */ async function getInfluencerMe() {\n    try {\n        const data = await request(\"/api/v1/influencers/me\", {\n            method: \"GET\"\n        });\n        const infl = {\n            ...data,\n            channels: channelsFromApi(data === null || data === void 0 ? void 0 : data.channels)\n        };\n        return infl;\n    } catch (err) {\n        if (err instanceof ApiError && (err.status === 401 || err.status === 403)) {\n            return null;\n        }\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Profil güncelleme — PATCH /api/v1/influencers/me */ async function patchInfluencerMe(partial) {\n    try {\n        const body = {\n            ...partial,\n            channels: partial.channels !== undefined ? channelsToApi(partial.channels) : undefined\n        };\n        const data = await request(\"/api/v1/influencers/me\", {\n            method: \"PATCH\",\n            body\n        });\n        const infl = {\n            ...data,\n            channels: channelsFromApi(data === null || data === void 0 ? void 0 : data.channels)\n        };\n        return infl;\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Özet — GET /api/v1/influencers/me/summary */ async function getInfluencerSummary() {\n    try {\n        const data = await request(\"/api/v1/influencers/me/summary\", {\n            method: \"GET\"\n        });\n        return data;\n    } catch (err) {\n        if (err instanceof ApiError && (err.status === 401 || err.status === 403)) {\n            return null;\n        }\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** (Opsiyonel) Kendi kodlarımı listele — UI ihtiyaç duyarsa kullanılabilir\n * Not: Backend'de GET /codes/me uç noktası yoksa bu fonksiyon kullanılmaz.\n */ async function listMyCodesUnsafe() {\n    return request(\"/api/v1/codes/me\", {\n        method: \"GET\"\n    });\n}\n/** (Muhasebe) Toplam bakiye — GET /api/v1/balance/me */ async function getMyBalance() {\n    try {\n        return await request(\"/api/v1/balance/me\", {\n            method: \"GET\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError && (err.status === 401 || err.status === 403)) {\n            return null;\n        }\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** (Muhasebe) İşlem listesi — GET /api/v1/sales/me?code=CODE123 */ async function getMySales(params) {\n    const q = [];\n    if (params === null || params === void 0 ? void 0 : params.code) q.push(\"code=\".concat(encodeURIComponent(params.code)));\n    if (params === null || params === void 0 ? void 0 : params.limit) q.push(\"limit=\".concat(encodeURIComponent(String(params.limit))));\n    if (params === null || params === void 0 ? void 0 : params.offset) q.push(\"offset=\".concat(encodeURIComponent(String(params.offset))));\n    const qs = q.length ? \"?\".concat(q.join(\"&\")) : \"\";\n    return request(\"/api/v1/sales/me\".concat(qs), {\n        method: \"GET\"\n    });\n}\n/** (Muhasebe) Ödeme/mahsuplaşma geçmişi — GET /api/v1/balance/me/settlements */ async function getMySettlements(params) {\n    const q = [];\n    if (params === null || params === void 0 ? void 0 : params.limit) q.push(\"limit=\".concat(encodeURIComponent(String(params.limit))));\n    if (params === null || params === void 0 ? void 0 : params.offset) q.push(\"offset=\".concat(encodeURIComponent(String(params.offset))));\n    if (params === null || params === void 0 ? void 0 : params.query) q.push(\"query=\".concat(encodeURIComponent(params.query)));\n    const qs = q.length ? \"?\".concat(q.join(\"&\")) : \"\";\n    return request(\"/api/v1/balance/me/settlements\".concat(qs), {\n        method: \"GET\"\n    });\n}\n/** Okunmamış uyarıları getir — GET /api/v1/alerts/unread */ async function getUnreadAlerts() {\n    try {\n        return await request(\"/api/v1/alerts/unread\", {\n            method: \"GET\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Uyarıyı okundu olarak işaretle — POST /api/v1/alerts/:id/read */ async function markAlertRead(alertId) {\n    try {\n        return await request(\"/api/v1/alerts/\".concat(alertId, \"/read\"), {\n            method: \"POST\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Tüm uyarıları listele (Admin) — GET /api/v1/alerts */ async function listAlerts() {\n    try {\n        return await request(\"/api/v1/alerts\", {\n            method: \"GET\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Yeni uyarı oluştur (Admin) — POST /api/v1/alerts */ async function createAlert(payload) {\n    try {\n        return await request(\"/api/v1/alerts\", {\n            method: \"POST\",\n            body: payload\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Uyarı sil (Admin) — DELETE /api/v1/alerts/:id */ async function deleteAlert(id) {\n    try {\n        await request(\"/api/v1/alerts/\".concat(id), {\n            method: \"DELETE\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/* =========================\n * Mesajlaşma API istemci fonksiyonları\n * ========================= */ /** Yeni mesaj gönder — POST /api/v1/messages\n * Influencer -> Admin: { to:'admin', body }\n * Admin -> Influencer: { to:'influencer', influencerId, body }\n */ async function sendMessage(input) {\n    return request(\"/api/v1/messages\", {\n        method: \"POST\",\n        body: input\n    });\n}\n/** Konuşma — GET /api/v1/messages/thread\n * Admin: ?influencerId=\n * Influencer: parametresiz (admin↔me)\n */ async function getThread(params) {\n    const q = [];\n    if (params === null || params === void 0 ? void 0 : params.influencerId) q.push(\"influencerId=\".concat(encodeURIComponent(String(params.influencerId))));\n    if (params === null || params === void 0 ? void 0 : params.limit) q.push(\"limit=\".concat(encodeURIComponent(String(params.limit))));\n    if (params === null || params === void 0 ? void 0 : params.before) q.push(\"before=\".concat(encodeURIComponent(params.before)));\n    const qs = q.length ? \"?\".concat(q.join(\"&\")) : \"\";\n    return request(\"/api/v1/messages/thread\".concat(qs), {\n        method: \"GET\"\n    });\n}\n/** Okundu — POST /api/v1/messages/read\n * Admin: { influencerId }\n * Influencer: body gereksiz\n */ async function markRead(body) {\n    return request(\"/api/v1/messages/read\", {\n        method: \"POST\",\n        body: body !== null && body !== void 0 ? body : {}\n    });\n}\n/** Okunmamış sayısı — GET /api/v1/messages/unread-count\n * Influencer: parametresiz\n * Admin: ?aggregate=true veya ?influencerId=\n */ async function getUnreadCount(params) {\n    const q = [];\n    if (params === null || params === void 0 ? void 0 : params.aggregate) q.push(\"aggregate=true\");\n    if (params === null || params === void 0 ? void 0 : params.influencerId) q.push(\"influencerId=\".concat(encodeURIComponent(String(params.influencerId))));\n    const qs = q.length ? \"?\".concat(q.join(\"&\")) : \"\";\n    return request(\"/api/v1/messages/unread-count\".concat(qs), {\n        method: \"GET\"\n    });\n}\n/** Admin arama — GET /api/v1/influencers/search?q= */ async function searchInfluencers(q) {\n    const qs = \"?q=\".concat(encodeURIComponent(q));\n    return request(\"/api/v1/influencers/search\".concat(qs), {\n        method: \"GET\"\n    });\n}\n/** Şifre güncelleme — PATCH /api/v1/influencers/me/password */ async function patchInfluencerMePassword(payload) {\n    try {\n        return await request(\"/api/v1/influencers/me/password\", {\n            method: \"PATCH\",\n            body: payload\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Sosyal hesapları listele — GET /api/v1/influencers/me/social-accounts */ async function getInfluencerSocialAccounts() {\n    try {\n        return await request(\"/api/v1/influencers/me/social-accounts\", {\n            method: \"GET\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Sosyal hesap ekle — POST /api/v1/influencers/me/social-accounts */ async function addInfluencerSocialAccount(payload) {\n    try {\n        return await request(\"/api/v1/influencers/me/social-accounts\", {\n            method: \"POST\",\n            body: payload\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Sosyal hesap güncelle — PATCH /api/v1/influencers/me/social-accounts/:id */ async function updateInfluencerSocialAccount(id, partial) {\n    try {\n        return await request(\"/api/v1/influencers/me/social-accounts/\".concat(id), {\n            method: \"PATCH\",\n            body: partial\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Sosyal hesap sil — DELETE /api/v1/influencers/me/social-accounts/:id */ async function deleteInfluencerSocialAccount(id) {\n    try {\n        await request(\"/api/v1/influencers/me/social-accounts/\".concat(id), {\n            method: \"DELETE\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Ödeme hesaplarını listele — GET /api/v1/influencers/me/payment-accounts */ async function getInfluencerPaymentAccounts() {\n    try {\n        return await request(\"/api/v1/influencers/me/payment-accounts\", {\n            method: \"GET\"\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n/** Ödeme hesabı ekle — POST /api/v1/influencers/me/payment-accounts */ async function addInfluencerPaymentAccount(payload) {\n    try {\n        return await request(\"/api/v1/influencers/me/payment-accounts\", {\n            method: \"POST\",\n            body: payload\n        });\n    } catch (err) {\n        if (err instanceof ApiError) throw new Error(err.message);\n        throw err;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});